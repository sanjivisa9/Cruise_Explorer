# Generated by Django 4.2.7 on 2025-04-28 11:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("api", "0024_merge_booking_timestamps_logedinuser"),
    ]

    operations = [
        migrations.CreateModel(
            name="BookingItinerary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("embarkation_port", models.CharField(max_length=100)),
                ("disembarkation_port", models.CharField(max_length=100)),
                ("total_cost", models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name="GroupBooking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="GuestProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_of_birth", models.DateField()),
                ("nationality", models.CharField(max_length=100)),
                ("passport_number", models.CharField(max_length=50)),
                ("dietary_preferences", models.JSONField(default=dict)),
                ("onboard_preferences", models.JSONField(default=dict)),
                ("loyalty_points", models.IntegerField(default=0)),
                ("referral_code", models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Household",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="OnboardSpending",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("transaction_date", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Package",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("valid_from", models.DateField()),
                ("valid_to", models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name="PackageComponent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_mandatory", models.BooleanField(default=False)),
                ("quantity", models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("DINING", "Dining"),
                            ("CONFERENCE", "Conference Room"),
                            ("WORKSHOP", "Workshop"),
                            ("SPA", "Spa Treatment"),
                            ("HOTEL", "Hotel"),
                            ("TRANSPORT", "Transportation"),
                            ("EXCURSION", "Shore Excursion"),
                            ("PACKAGE", "Package"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("capacity", models.IntegerField()),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("schedule", models.JSONField(null=True)),
                ("is_allotment", models.BooleanField(default=False)),
                ("allotment_details", models.JSONField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="SalesforceIntegration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("salesforce_id", models.CharField(max_length=100, unique=True)),
                ("last_synced", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AlterField(
            model_name="booking",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name="booking",
            name="location",
            field=models.CharField(
                choices=[("forward", "Forward"), ("middle", "Middle"), ("aft", "Aft")],
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="booking",
            name="room_type",
            field=models.CharField(
                choices=[("Oceanview", "Oceanview"), ("Interior", "Interior")],
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="InteriorAft",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="InteriorForward",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="InteriorMiddle",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="InteriorRooms",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="InteriorRoomsCost",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="cost",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="cruiseName",
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="decks",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(1)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="nights",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(1)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="oceanviewAft",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="oceanviewForward",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="oceanviewMiddle",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="oceanviewRooms",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="oceanviewRoomsCost",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name="cruisedetailfinal",
            name="seats",
            field=models.IntegerField(
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["cruise", "room_type", "location"],
                name="api_booking_cruise__8c7537_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(fields=["user"], name="api_booking_user_id_cfdf50_idx"),
        ),
        migrations.AddIndex(
            model_name="cruisedetailfinal",
            index=models.Index(
                fields=["type", "origin", "startDate"],
                name="api_cruised_type_41c901_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="cruisedetailfinal",
            index=models.Index(
                fields=["cruiseName"], name="api_cruised_cruiseN_ee14e2_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="booking",
            constraint=models.UniqueConstraint(
                fields=("cruise", "room_number"), name="unique_room_booking"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="api_user_set",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="api_user_set",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddField(
            model_name="salesforceintegration",
            name="guest",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="api.guestprofile"
            ),
        ),
        migrations.AddField(
            model_name="packagecomponent",
            name="package",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.package"
            ),
        ),
        migrations.AddField(
            model_name="packagecomponent",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.product"
            ),
        ),
        migrations.AddField(
            model_name="package",
            name="products",
            field=models.ManyToManyField(
                through="api.PackageComponent", to="api.product"
            ),
        ),
        migrations.AddField(
            model_name="onboardspending",
            name="cruise",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.cruisedetailfinal"
            ),
        ),
        migrations.AddField(
            model_name="onboardspending",
            name="guest",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.guestprofile"
            ),
        ),
        migrations.AddField(
            model_name="onboardspending",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.product"
            ),
        ),
        migrations.AddField(
            model_name="household",
            name="primary_contact",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="primary_household",
                to="api.guestprofile",
            ),
        ),
        migrations.AddField(
            model_name="guestprofile",
            name="household",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="members",
                to="api.household",
            ),
        ),
        migrations.AddField(
            model_name="guestprofile",
            name="referred_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.guestprofile",
            ),
        ),
        migrations.AddField(
            model_name="guestprofile",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="api.user"
            ),
        ),
        migrations.AddField(
            model_name="groupbooking",
            name="cruise",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.cruisedetailfinal"
            ),
        ),
        migrations.AddField(
            model_name="groupbooking",
            name="organizer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.guestprofile"
            ),
        ),
        migrations.AddField(
            model_name="bookingitinerary",
            name="booking",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.booking"
            ),
        ),
        migrations.AddField(
            model_name="bookingitinerary",
            name="guest",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.guestprofile"
            ),
        ),
        migrations.AddField(
            model_name="bookingitinerary",
            name="products",
            field=models.ManyToManyField(to="api.product"),
        ),
        migrations.AlterField(
            model_name="booking",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.user"
            ),
        ),
    ]
